// link: https://github.com/NVIDIA/cutlass/blob/main/media/docs/cpp/cute/02_layout_algebra.md
#include <cute/tensor.hpp>

using namespace cute;

void layout_coalesce() {
    auto layout = Layout<Shape<_2, Shape<_1, _6>>,
                         Stride<_1, Stride<_6, _2>>>{};
    auto result = coalesce(layout); // _12 : _1
    print(result);
    print("\n");
}

void layout_composition() {
    printf("\n-------------------------------------------------\n");
    /*
        Functional composition, R := A o B
        R(c) := (A o B)(c) := A(B(c))

        Example
        A = (6,2):(8,2)
        B = (4,3):(3,1)

        R( 0) = A(B( 0)) = A(B(0,0)) = A( 0) = A(0,0) =  0
        R( 1) = A(B( 1)) = A(B(1,0)) = A( 3) = A(3,0) = 24
        R( 2) = A(B( 2)) = A(B(2,0)) = A( 6) = A(0,1) =  2
        R( 3) = A(B( 3)) = A(B(3,0)) = A( 9) = A(3,1) = 26
        R( 4) = A(B( 4)) = A(B(0,1)) = A( 1) = A(1,0) =  8
        R( 5) = A(B( 5)) = A(B(1,1)) = A( 4) = A(4,0) = 32
        R( 6) = A(B( 6)) = A(B(2,1)) = A( 7) = A(1,1) = 10
        R( 7) = A(B( 7)) = A(B(3,1)) = A(10) = A(4,1) = 34
        R( 8) = A(B( 8)) = A(B(0,2)) = A( 2) = A(2,0) = 16
        R( 9) = A(B( 9)) = A(B(1,2)) = A( 5) = A(5,0) = 40
        R(10) = A(B(10)) = A(B(2,2)) = A( 8) = A(2,1) = 18
        R(11) = A(B(11)) = A(B(3,2)) = A(11) = A(5,1) = 42
    */

    /*
        (6,2):(8,2)
               0    1
            +----+----+
         0  |  0 |  2 |
            +----+----+
         1  |  8 | 10 |
            +----+----+
         2  | 16 | 18 |
            +----+----+
         3  | 24 | 26 |
            +----+----+
         4  | 32 | 34 |
            +----+----+
         5  | 40 | 42 |
            +----+----+
    */
    Layout A = make_layout(make_shape(6, 2), make_stride(8, 2)); // (6, 2) : (8, 2)
    /*
        (4,3):(3,1)
               0    1    2
            +----+----+----+
         0  |  0 |  1 |  2 |
            +----+----+----+
         1  |  3 |  4 |  5 |
            +----+----+----+
         2  |  6 |  7 |  8 |
            +----+----+----+
         3  |  9 | 10 | 11 |
            +----+----+----+
    */
    Layout B = make_layout(make_shape(4, 3), make_stride(3, 1)); // (4, 3) : (3, 1)
    /*
        ((2,2),(3,1)):((24,2),(8,2))
               0    1    2
            +----+----+----+
         0  |  0 |  8 | 16 |
            +----+----+----+
         1  | 24 | 32 | 40 |
            +----+----+----+
         2  |  2 | 10 | 18 |
            +----+----+----+
         3  | 26 | 34 | 42 |
            +----+----+----+
    */
    Layout C = composition(A, B); // ((2,2),(3,1)):((24,2),(8,2))
    print_layout(A);
    print_layout(B);
    print_layout(C);
}

void layout_composition_1() {
    printf("============== (10, 2):(16, 4) o (5, 4):(1, 5) ===============\n");
    /*
        (10, 2) : (16, 4) o (5, 4):(1, 5)  layout (10,2):(16,4)作为列优先顺序的5x4矩阵
        1. = (10,2):(16,4) o (5:1, 4:5) 布局(5,4):(1,5)作为子布局的串联
        2. = ((10,2):(16,4) o 5:1, (10,2):(16,4) o 4:5) 左分配
            > (10,2):(16,4) o 5:1 => (5,1):(16,4) mod out the shape 5
            > (10,2):(16,4) o 4:5 => (2,2):(80,4) div out the stride 5
        3. = ((5,1):(16,4), (2,2):(80,4)) 组合布局作为子布局的串联
        4. = (5:16, (2,2):(80,4)) 按模式合并
        5. = (5,(2,2)):(16,(80,4)) 最终组合布局
    */
    /*
    (_10,_2):(_16,_4)
            0     1
        +-----+-----+
     0  |   0 |   4 |
        +-----+-----+
     1  |  16 |  20 |
        +-----+-----+
     2  |  32 |  36 |
        +-----+-----+
     3  |  48 |  52 |
        +-----+-----+
     4  |  64 |  68 |
        +-----+-----+
     5  |  80 |  84 |
        +-----+-----+
     6  |  96 | 100 |
        +-----+-----+
     7  | 112 | 116 |
        +-----+-----+
     8  | 128 | 132 |
        +-----+-----+
     9  | 144 | 148 |
        +-----+-----+
    */
    Layout a = make_layout(make_shape(Int<10>{}, Int<2>{}),
                           make_stride(Int<16>{}, Int<4>{}));
    /*
    (_5,_4):(_1,_5)
           0    1    2    3
        +----+----+----+----+
     0  |  0 |  5 | 10 | 15 |
        +----+----+----+----+
     1  |  1 |  6 | 11 | 16 |
        +----+----+----+----+
     2  |  2 |  7 | 12 | 17 |
        +----+----+----+----+
     3  |  3 |  8 | 13 | 18 |
        +----+----+----+----+
     4  |  4 |  9 | 14 | 19 |
        +----+----+----+----+
    */
    Layout b = make_layout(make_shape(Int<5>{}, Int<4>{}),
                           make_stride(Int<1>{}, Int<5>{}));
    /*
    (_5,(_2,_2)):(_16,(_80,_4))
            0     1     2     3
        +-----+-----+-----+-----+
     0  |   0 |  80 |   4 |  84 |
        +-----+-----+-----+-----+
     1  |  16 |  96 |  20 | 100 |
        +-----+-----+-----+-----+
     2  |  32 | 112 |  36 | 116 |
        +-----+-----+-----+-----+
     3  |  48 | 128 |  52 | 132 |
        +-----+-----+-----+-----+
     4  |  64 | 144 |  68 | 148 |
        +-----+-----+-----+-----+
    */
    Layout c = composition(a, b); // (_5, (_2, _2)):(_16, (_80, _4))
    print_layout(a);
    print_layout(b);
    print_layout(c);
}

int main(int argc, char **argv) {
    layout_coalesce(); // coalesce
    layout_composition();

    // (10, 2):(16, 4) o (5, 4):(1, 5)
    layout_composition_1();
    return 0;
}
